#!perl
use Cassandane::Tiny;
use Encode qw(decode);

sub test_contact_set_phonetic
  : needs_component_jmap {
    my ($self)  = @_;
    my $jmap    = $self->{jmap};
    my $carddav = $self->{carddav};

    xlog $self, "Create Contact with phonetic properties";

    my %jprops = (
        firstName         => decode('utf-8', '一朗'),
        lastName          => decode('utf-8', '鈴木'),
        company           => decode('utf-8', '日本野球機構'),
        phoneticFirstName => decode('utf-8', 'いちろう'),
        phoneticLastName  => decode('utf-8', 'すずき'),
        phoneticCompany   => decode('utf-8', 'にっぽんやきゅうきこう'),
    );

    my $res = $jmap->CallMethods([
        [
            'Contact/set',
            {
                create => {
                    contact1 => \%jprops,
                },
            },
            'R1'
        ],
        [
            'Contact/get', {
                ids => ['#contact1'], properties => [ keys %jprops, "x-href" ]
            }, 'R2'
        ]
    ]);
    my $contactId = $res->[0][1]{created}{contact1}{id};
    $self->assert_not_null($contactId);
    my $xhref = $res->[1][1]{list}[0]{'x-href'};
    $self->assert_not_null($xhref);

    xlog $self, "Assert JMAP and vCard properties";

    keys %jprops;
    while (my ($prop, $value) = each %jprops) {
        $self->assert_str_equals($value, $res->[1][1]{list}[0]{$prop});
    }

    my %vcardProps = (
        N                       => decode('utf-8', '鈴木;一朗;'),
        ORG                     => decode('utf-8', '日本野球機構'),
        'X-PHONETIC-FIRST-NAME' => decode('utf-8', 'いちろう'),
        'X-PHONETIC-LAST-NAME'  => decode('utf-8', 'すずき'),
        'X-PHONETIC-ORG'        => decode('utf-8', 'にっぽんやきゅうきこう'),
    );

    $res = $carddav->Request('GET', $xhref);
    my $vcard = decode('utf-8', $res->{content});
    $self->assert_not_null($vcard);

    keys %vcardProps;
    while (my ($prop, $value) = each %vcardProps) {
        $self->assert_matches(qr/^$prop:$value\r?$/m, $vcard);
    }

    xlog $self, "Update phonetic properties";

    $jprops{company}         = 'Acme Corporation';
    $jprops{phoneticCompany} = decode('utf-8', '/ˈæk.mi/ /ˌkɔːr.pəˈreɪ.ʃən/');
    delete $jprops{phoneticLastName};

    $vcardProps{ORG}              = $jprops{company};
    $vcardProps{'X-PHONETIC-ORG'} = $jprops{phoneticCompany};
    delete $vcardProps{'X-PHONETIC-LAST-NAME'};

    my $res = $jmap->CallMethods([
        [
            'Contact/set',
            {
                update => {
                    $contactId => {
                        company          => $jprops{company},
                        phoneticCompany  => $jprops{phoneticCompany},
                        phoneticLastName => undef,
                    }
                }
            },
            'R1'
        ],
        [
            'Contact/get',
            {
                ids => ['#contact1'], properties => [ keys %jprops ],
            },
            'R2'
        ]
    ]);
    $self->assert(exists $res->[0][1]{updated}{$contactId});

    xlog $self, "Assert JMAP and vCard properties";

    keys %jprops;
    while (my ($prop, $value) = each %jprops) {
        $self->assert_str_equals($value, $res->[1][1]{list}[0]{$prop});
    }

    $res = $carddav->Request('GET', $xhref);
    my $vcard = decode('utf-8', $res->{content});
    $self->assert_not_null($vcard);

    keys %vcardProps;
    while (my ($prop, $value) = each %vcardProps) {
        $self->assert_matches(qr/^$prop:$value\r?$/m, $vcard);
    }
}
