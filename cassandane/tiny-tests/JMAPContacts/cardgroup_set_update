#!perl
use Cassandane::Tiny;

sub test_cardgroup_set_update
    :min_version_3_9 :needs_dependency_icalvcard
{
    my ($self) = @_;
    my $jmap = $self->{jmap};

    my $service = $self->{instance}->get_service("http");
    $ENV{DEBUGDAV} = 1;
    my $carddav = Net::CardDAVTalk->new(
        user => 'cassandane',
        password => 'pass',
        host => $service->host(),
        port => $service->port(),
        scheme => 'http',
        url => '/',
        expandurl => 1,
    );

    my $res = $jmap->CallMethods([
        ['ContactCard/set', {
            create => {
                "1" => {
                    '@type' => 'Card',
                    version => '1.0',
                    name => { full => 'John Doe' },
                },
                "2" => {
                    '@type' => 'Card',
                    version => '1.0',
                    name => { full => 'Jane Doe' },
                }
            }
        }, 'R1']
    ]);

    my $uid1 = $res->[0][1]{created}{1}{uid};
    $self->assert_not_null($uid1);
    my $uid2 = $res->[0][1]{created}{2}{uid};
    $self->assert_not_null($uid2);

    my $name = 'The Doe Family';

    $res = $jmap->CallMethods([
        ['ContactCard/set', {
            create => {
                "1" => {
                    '@type' => 'Card',
                    version => '1.0',
                    kind => 'group',
                    name => { full => $name },
                    members => {
                        $uid1 => JSON::true
                    }
                }
            }
        }, 'R1']
    ]);

    my $id = $res->[0][1]{created}{1}{id};
    $self->assert_not_null($id);

    my $href = "Default/$id.vcf";
    my $member1 = "urn:uuid:$uid1";
    my $member2 = "urn:uuid:$uid2";

    $res = $carddav->Request('GET', $href, '',
                             'Accept' => 'text/vcard; version=4.0');

    my $card = $res->{content};
    $card =~ s/\r?\n[ \t]+//gs;  # unfold long properties

    $self->assert_matches(qr/MEMBER:$member1/, $card);

    $res = $jmap->CallMethods([
        ['ContactCard/set', {
            update => {
                $id => {
                    "members/$uid2" => JSON::true
                }
            }
         }, "R2"]
    ]);

    $self->assert_not_null($res->[0][1]{updated}{$id});

    $res = $carddav->Request('GET', $href, '',
                             'Accept' => 'text/vcard; version=4.0');

    $card = $res->{content};
    $card =~ s/\r?\n[ \t]+//gs;  # unfold long properties

    $self->assert_matches(qr/MEMBER:$member2/, $card);
    $self->assert_matches(qr/MEMBER:$member1/, $card);

    $res = $jmap->CallMethods([
        ['ContactCard/set', {
            update => {
                $id => {
                    "members/$uid1" => JSON::null
                }
            }
         }, "R2"]
    ]);

    $self->assert_not_null($res->[0][1]{updated}{$id});

    $res = $carddav->Request('GET', $href, '',
                             'Accept' => 'text/vcard; version=4.0');

    $card = $res->{content};
    $card =~ s/\r?\n[ \t]+//gs;  # unfold long properties

    $self->assert_matches(qr/MEMBER:$member2/, $card);
    $self->assert_does_not_match(qr/MEMBER:$member1/, $card);

    $res = $jmap->CallMethods([
        ['ContactCard/set', {
            update => {
                $id => {
                    kind => 'individual'
                }
            }
         }, "R2"]
    ]);

    $self->assert_not_null($res->[0][1]{notUpdated}{$id});
    $self->assert_str_equals("invalidProperties",
                             $res->[0][1]{notUpdated}{$id}{type});
    $self->assert_str_equals("kind",
                             $res->[0][1]{notUpdated}{$id}{properties}[0]);
}
