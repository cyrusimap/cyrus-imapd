#!perl
use Cassandane::Tiny;

sub test_card_set_create_speaktoas
    :min_version_3_9 :needs_component_jmap
{
    my ($self) = @_;
    my $jmap = $self->{jmap};

    my $service = $self->{instance}->get_service("http");
    $ENV{DEBUGDAV} = 1;
    my $carddav = Net::CardDAVTalk->new(
        user => 'cassandane',
        password => 'pass',
        host => $service->host(),
        port => $service->port(),
        scheme => 'http',
        url => '/',
        expandurl => 1,
    );

    my $id = 'ae2640cc-234a-4dd9-95cc-3106258445b9';
    my $href = "Default/$id.vcf";

    my $res = $jmap->CallMethods([
        ['ContactCard/set', {
            create => {
                "1" => {
                    '@type' => 'Card',
                    version => '1.0',
                    uid => $id,
                    name => { full => 'John Doe' },
                    speakToAs => {
                        '@type' => 'SpeakToAs',
                        grammaticalGender => 'neuter',
                        pronouns => {
                            k19 => {
                                pronouns => 'they/them',
                                pref => 2
                            },
                            k32 => {
                                '@type' => 'Pronouns',
                                pronouns => 'xe/xir',
                                pref => 1
                            }
                        }
                    }
                }
            }
        }, 'R1']
    ]);

    $self->assert_not_null($res->[0][1]{created}{1});

    $res = $carddav->Request('GET', $href, '',
                             'Accept' => 'text/vcard; version=4.0');

    my $card = $res->{content};
    $card =~ s/\r?\n[ \t]+//gs;  # unfold long properties

    $self->assert_matches(qr|GRAMGENDER:NEUTER|, $card);
    $self->assert_matches(qr|PRONOUNS;PROP-ID=k19;PREF=2:they/them|, $card);
    $self->assert_matches(qr|PRONOUNS;PROP-ID=k32;PREF=1:xe/xir|, $card);
    $self->assert_does_not_match(qr|JSPROP|, $card);
}
