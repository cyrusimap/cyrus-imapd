#!perl
use Cassandane::Tiny;

sub test_email_legacy_ids
    :MailboxLegacyDirs :NoAltNameSpace :Conversations
{
    my ($self) = @_;
    my $jmap = $self->{jmap};

    my $store = $self->{store};
    my $talk = $store->get_client();
    $talk->create('INBOX.foo');

    my $data_file = abs_path("data/old-mailboxes/version19.tar.gz");
    die "Old mailbox data does not exist: $data_file" if not -f $data_file;

    xlog "installing version 19 mailboxes";
    $self->{instance}->unpackfile($data_file, $self->{instance}->get_basedir());

    xlog "reconstructing indexes at v19 to get predictable senddate";
    $self->{instance}->run_command({ cyrus => 1 }, 'reconstruct', '-G', '-q');

    xlog $self, "Fetching EMAILIDs";
    $talk->examine('INBOX');
    my $res = $talk->fetch('1:*', '(UID EMAILID)');
    my $id1 = $res->{1}{emailid}[0];
    my $id2 = $res->{2}{emailid}[0];
    my $id3 = $res->{3}{emailid}[0];
    my $id4 = $res->{4}{emailid}[0];

    $self->assert_matches(qr/^M/, $id1);
    $self->assert_matches(qr/^M/, $id2);
    $self->assert_matches(qr/^M/, $id3);
    $self->assert_matches(qr/^M/, $id4);

    xlog $self, "get email list";
    $res = $jmap->CallMethods([['Email/query', {
        sort => [{
            property => 'receivedAt',
        }],
    }, "R1"]]);
    $self->assert_num_equals(4, scalar @{$res->[0][1]->{ids}});
    $self->assert_str_equals($id1, $res->[0][1]->{ids}[0]);

    xlog $self, "get emails";
    my $ids = $res->[0][1]->{ids};
    $res = $jmap->CallMethods([['Email/get', { ids => $ids }, "R1"]]);
    $self->assert_num_equals(4, scalar @{$res->[0][1]->{list}});
    my $msg = $res->[0][1]->{list}[0];
    $self->assert_str_equals($id1, $msg->{id});
    $self->assert_num_equals(2, scalar keys %{$msg->{mailboxIds}});

    xlog $self, "Update $id2";
    $res = $jmap->CallMethods([['Email/set', {
        update => {
            $id2 => {
                keywords => {
                    '$flagged' => JSON::true
                }
            }
        }
    }, "R1"]]);
    $self->assert(exists $res->[0][1]{updated}{$id2});

    xlog $self, "Destroy $id3";
    $res = $jmap->CallMethods([['Email/set', {
        destroy => [ $id3 ]
    }, "R1"]]);
    $self->assert_str_equals($id3, $res->[0][1]{destroyed}[0]);

    xlog $self, "Create user and share mailbox read-write";
    $self->{instance}->create_user("other");
    my $admintalk = $self->{adminstore}->get_client();
    $admintalk->setacl("user.other", "cassandane", "lrsiwntex") or die;

    my $dstInboxId = $self->getinbox({accountId => 'other'})->{id};
    $self->assert_not_null($dstInboxId);

    xlog $self, "Create new email";
    $res = $jmap->CallMethods([
        ['Email/set', {
            create => {
                1 => {
                    mailboxIds => {
                        '$inbox' => JSON::true
                    },
                    from => [{ email => q{foo@bar} }],
                    to => [{ email => q{bar@foo} }],
                    subject => "test",
                }
            },
        }, 'R1'],
    ]);
    my $id5 = $res->[0][1]->{created}{1}{id};
    $self->assert_matches(qr/^M/, $id5);

    xlog $self, "Move $id4";
    $res = $jmap->CallMethods([
        ['Email/copy', {
            fromAccountId => 'cassandane',
            accountId => 'other',
            create => {
                1 => {
                    id => $id4,
                    mailboxIds => {
                        $dstInboxId => JSON::true,
                    },
                },
            },
            onSuccessDestroyOriginal => JSON::true,
        }, 'R1'],
    ]);
    $self->assert_str_equals($id4, $res->[0][1]->{created}{1}{id});
    $self->assert_str_equals($id4, $res->[1][1]{destroyed}[0]);

    # make the consistency check happy
    $self->{instance}->run_command({ cyrus => 1 },
                                   'reconstruct', '-G', '-q', '-u', 'other');
}
