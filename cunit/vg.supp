# Valgrind suppressions file for Cyrus unit tests
#
# Copyright (c) 1994-2011 Carnegie Mellon University.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#
# 3. The name "Carnegie Mellon University" must not be used to
#    endorse or promote products derived from this software without
#    prior written permission. For permission or any legal
#    details, please contact
#      Carnegie Mellon University
#      Center for Technology Transfer and Enterprise Creation
#      4615 Forbes Avenue
#      Suite 302
#      Pittsburgh, PA  15213
#      (412) 268-7393, fax: (412) 268-7395
#      innovation@andrew.cmu.edu
#
# 4. Redistributions of any form whatsoever must retain the following
#    acknowledgment:
#    "This product includes software developed by Computing Services
#     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
#
# CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
# THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
# FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
# AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
# OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
{
    # The libconfig:*_invalid tests all fatal out from in libconfig, which
    # is fine in reality, but under CUnit we're trapping the fatal and not
    # actually exiting.  Which means we detect some leaks that aren't real.
    config_read_string_fname_leak
    Memcheck:Leak
    match-leak-kinds: definite
    fun:malloc
    fun:xmalloc
    fun:xstrdup
    fun:config_read_string
    fun:test_*_invalid
    ...
    obj:*/libcunit*
    ...
}
{
    # The libconfig:*_invalid tests all fatal out from in libconfig, which
    # is fine in reality, but under CUnit we're trapping the fatal and not
    # actually exiting.  Which means we detect some leaks that aren't real.
    config_read_file_buf_leak
    Memcheck:Leak
    match-leak-kinds: definite
    fun:malloc
    fun:xmalloc
    fun:config_read_file
    fun:config_read
    fun:config_read_string
    fun:test_*_invalid
    ...
    obj:*/libcunit*
    ...
}
{
    # The parse:getint tests each check for fatal parse errors, but when
    # this occurs the protstream structure is leaked.
    parse_getint_protstream_leak
    Memcheck:Leak
    match-leak-kinds: definite
    fun:malloc
    fun:xmalloc
    fun:xzmalloc
    fun:prot_readmap
    fun:test_get*int*
    ...
    obj:*/libcunit*
    ...
}

{
   # shush leaked SASL internal state in toy server process
   backend_child_process_sasl_state
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:malloc
   fun:_dlfo_mappings_segment_allocate
   fun:_dl_find_object_update_1
   fun:_dl_find_object_update
   fun:dl_open_worker_begin
   fun:_dl_catch_exception
   fun:dl_open_worker
   fun:_dl_catch_exception
   fun:_dl_open
   fun:dlopen_doit
   fun:_dl_catch_exception
   fun:_dl_catch_error
   fun:_dlerror_run
   fun:dlopen_implementation
   ...
}
